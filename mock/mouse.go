// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/adamroach/webrd/pkg/hid/mouse"
	mock "github.com/stretchr/testify/mock"
)

// NewMouse creates a new instance of Mouse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMouse(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mouse {
	mock := &Mouse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mouse is an autogenerated mock type for the Mouse type
type Mouse struct {
	mock.Mock
}

type Mouse_Expecter struct {
	mock *mock.Mock
}

func (_m *Mouse) EXPECT() *Mouse_Expecter {
	return &Mouse_Expecter{mock: &_m.Mock}
}

// Button provides a mock function for the type Mouse
func (_mock *Mouse) Button(event mouse.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Button")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(mouse.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mouse_Button_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Button'
type Mouse_Button_Call struct {
	*mock.Call
}

// Button is a helper method to define mock.On call
//   - event
func (_e *Mouse_Expecter) Button(event interface{}) *Mouse_Button_Call {
	return &Mouse_Button_Call{Call: _e.mock.On("Button", event)}
}

func (_c *Mouse_Button_Call) Run(run func(event mouse.Event)) *Mouse_Button_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mouse.Event))
	})
	return _c
}

func (_c *Mouse_Button_Call) Return(err error) *Mouse_Button_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mouse_Button_Call) RunAndReturn(run func(event mouse.Event) error) *Mouse_Button_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function for the type Mouse
func (_mock *Mouse) Move(x int, y int) error {
	ret := _mock.Called(x, y)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = returnFunc(x, y)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mouse_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type Mouse_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - x
//   - y
func (_e *Mouse_Expecter) Move(x interface{}, y interface{}) *Mouse_Move_Call {
	return &Mouse_Move_Call{Call: _e.mock.On("Move", x, y)}
}

func (_c *Mouse_Move_Call) Run(run func(x int, y int)) *Mouse_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *Mouse_Move_Call) Return(err error) *Mouse_Move_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mouse_Move_Call) RunAndReturn(run func(x int, y int) error) *Mouse_Move_Call {
	_c.Call.Return(run)
	return _c
}
