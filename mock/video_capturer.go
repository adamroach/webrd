// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"image"

	mock "github.com/stretchr/testify/mock"
)

// NewVideoCapturer creates a new instance of VideoCapturer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoCapturer(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoCapturer {
	mock := &VideoCapturer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VideoCapturer is an autogenerated mock type for the VideoCapturer type
type VideoCapturer struct {
	mock.Mock
}

type VideoCapturer_Expecter struct {
	mock *mock.Mock
}

func (_m *VideoCapturer) EXPECT() *VideoCapturer_Expecter {
	return &VideoCapturer_Expecter{mock: &_m.Mock}
}

// FrameChannel provides a mock function for the type VideoCapturer
func (_mock *VideoCapturer) FrameChannel() <-chan image.Image {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FrameChannel")
	}

	var r0 <-chan image.Image
	if returnFunc, ok := ret.Get(0).(func() <-chan image.Image); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan image.Image)
		}
	}
	return r0
}

// VideoCapturer_FrameChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrameChannel'
type VideoCapturer_FrameChannel_Call struct {
	*mock.Call
}

// FrameChannel is a helper method to define mock.On call
func (_e *VideoCapturer_Expecter) FrameChannel() *VideoCapturer_FrameChannel_Call {
	return &VideoCapturer_FrameChannel_Call{Call: _e.mock.On("FrameChannel")}
}

func (_c *VideoCapturer_FrameChannel_Call) Run(run func()) *VideoCapturer_FrameChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VideoCapturer_FrameChannel_Call) Return(imageCh <-chan image.Image) *VideoCapturer_FrameChannel_Call {
	_c.Call.Return(imageCh)
	return _c
}

func (_c *VideoCapturer_FrameChannel_Call) RunAndReturn(run func() <-chan image.Image) *VideoCapturer_FrameChannel_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type VideoCapturer
func (_mock *VideoCapturer) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VideoCapturer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type VideoCapturer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *VideoCapturer_Expecter) Start() *VideoCapturer_Start_Call {
	return &VideoCapturer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *VideoCapturer_Start_Call) Run(run func()) *VideoCapturer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VideoCapturer_Start_Call) Return(err error) *VideoCapturer_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VideoCapturer_Start_Call) RunAndReturn(run func() error) *VideoCapturer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type VideoCapturer
func (_mock *VideoCapturer) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VideoCapturer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type VideoCapturer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *VideoCapturer_Expecter) Stop() *VideoCapturer_Stop_Call {
	return &VideoCapturer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *VideoCapturer_Stop_Call) Run(run func()) *VideoCapturer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VideoCapturer_Stop_Call) Return(err error) *VideoCapturer_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VideoCapturer_Stop_Call) RunAndReturn(run func() error) *VideoCapturer_Stop_Call {
	_c.Call.Return(run)
	return _c
}
