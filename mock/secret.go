// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewSecret creates a new instance of Secret. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecret(t interface {
	mock.TestingT
	Cleanup(func())
}) *Secret {
	mock := &Secret{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Secret is an autogenerated mock type for the Secret type
type Secret struct {
	mock.Mock
}

type Secret_Expecter struct {
	mock *mock.Mock
}

func (_m *Secret) EXPECT() *Secret_Expecter {
	return &Secret_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type Secret
func (_mock *Secret) Get() any {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// Secret_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Secret_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *Secret_Expecter) Get() *Secret_Get_Call {
	return &Secret_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *Secret_Get_Call) Run(run func()) *Secret_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Secret_Get_Call) Return(v any) *Secret_Get_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *Secret_Get_Call) RunAndReturn(run func() any) *Secret_Get_Call {
	_c.Call.Return(run)
	return _c
}
