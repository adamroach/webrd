// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

type Authenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *Authenticator) EXPECT() *Authenticator_Expecter {
	return &Authenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type Authenticator
func (_mock *Authenticator) Authenticate(username string, password string) (string, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(username, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Authenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Authenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - username
//   - password
func (_e *Authenticator_Expecter) Authenticate(username interface{}, password interface{}) *Authenticator_Authenticate_Call {
	return &Authenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", username, password)}
}

func (_c *Authenticator_Authenticate_Call) Run(run func(username string, password string)) *Authenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Authenticator_Authenticate_Call) Return(token string, err error) *Authenticator_Authenticate_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *Authenticator_Authenticate_Call) RunAndReturn(run func(username string, password string) (string, error)) *Authenticator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type Authenticator
func (_mock *Authenticator) ValidateToken(token string) (string, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Authenticator_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type Authenticator_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token
func (_e *Authenticator_Expecter) ValidateToken(token interface{}) *Authenticator_ValidateToken_Call {
	return &Authenticator_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *Authenticator_ValidateToken_Call) Run(run func(token string)) *Authenticator_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Authenticator_ValidateToken_Call) Return(username string, err error) *Authenticator_ValidateToken_Call {
	_c.Call.Return(username, err)
	return _c
}

func (_c *Authenticator_ValidateToken_Call) RunAndReturn(run func(token string) (string, error)) *Authenticator_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
