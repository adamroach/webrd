// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMessageChannel creates a new instance of MessageChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageChannel {
	mock := &MessageChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MessageChannel is an autogenerated mock type for the MessageChannel type
type MessageChannel struct {
	mock.Mock
}

type MessageChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageChannel) EXPECT() *MessageChannel_Expecter {
	return &MessageChannel_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MessageChannel
func (_mock *MessageChannel) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MessageChannel_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MessageChannel_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MessageChannel_Expecter) Close() *MessageChannel_Close_Call {
	return &MessageChannel_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MessageChannel_Close_Call) Run(run func()) *MessageChannel_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageChannel_Close_Call) Return(err error) *MessageChannel_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MessageChannel_Close_Call) RunAndReturn(run func() error) *MessageChannel_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function for the type MessageChannel
func (_mock *MessageChannel) Receive() (any, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (any, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() any); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MessageChannel_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type MessageChannel_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
func (_e *MessageChannel_Expecter) Receive() *MessageChannel_Receive_Call {
	return &MessageChannel_Receive_Call{Call: _e.mock.On("Receive")}
}

func (_c *MessageChannel_Receive_Call) Run(run func()) *MessageChannel_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageChannel_Receive_Call) Return(v any, err error) *MessageChannel_Receive_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MessageChannel_Receive_Call) RunAndReturn(run func() (any, error)) *MessageChannel_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MessageChannel
func (_mock *MessageChannel) Send(message any) error {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MessageChannel_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MessageChannel_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - message
func (_e *MessageChannel_Expecter) Send(message interface{}) *MessageChannel_Send_Call {
	return &MessageChannel_Send_Call{Call: _e.mock.On("Send", message)}
}

func (_c *MessageChannel_Send_Call) Run(run func(message any)) *MessageChannel_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MessageChannel_Send_Call) Return(err error) *MessageChannel_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MessageChannel_Send_Call) RunAndReturn(run func(message any) error) *MessageChannel_Send_Call {
	_c.Call.Return(run)
	return _c
}
