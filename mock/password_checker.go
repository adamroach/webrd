// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewPasswordChecker creates a new instance of PasswordChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordChecker {
	mock := &PasswordChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PasswordChecker is an autogenerated mock type for the PasswordChecker type
type PasswordChecker struct {
	mock.Mock
}

type PasswordChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordChecker) EXPECT() *PasswordChecker_Expecter {
	return &PasswordChecker_Expecter{mock: &_m.Mock}
}

// CheckPassword provides a mock function for the type PasswordChecker
func (_mock *PasswordChecker) CheckPassword(username string, password string) bool {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckPassword")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// PasswordChecker_CheckPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPassword'
type PasswordChecker_CheckPassword_Call struct {
	*mock.Call
}

// CheckPassword is a helper method to define mock.On call
//   - username
//   - password
func (_e *PasswordChecker_Expecter) CheckPassword(username interface{}, password interface{}) *PasswordChecker_CheckPassword_Call {
	return &PasswordChecker_CheckPassword_Call{Call: _e.mock.On("CheckPassword", username, password)}
}

func (_c *PasswordChecker_CheckPassword_Call) Run(run func(username string, password string)) *PasswordChecker_CheckPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PasswordChecker_CheckPassword_Call) Return(b bool) *PasswordChecker_CheckPassword_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *PasswordChecker_CheckPassword_Call) RunAndReturn(run func(username string, password string) bool) *PasswordChecker_CheckPassword_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentUser provides a mock function for the type PasswordChecker
func (_mock *PasswordChecker) CurrentUser() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentUser")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// PasswordChecker_CurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentUser'
type PasswordChecker_CurrentUser_Call struct {
	*mock.Call
}

// CurrentUser is a helper method to define mock.On call
func (_e *PasswordChecker_Expecter) CurrentUser() *PasswordChecker_CurrentUser_Call {
	return &PasswordChecker_CurrentUser_Call{Call: _e.mock.On("CurrentUser")}
}

func (_c *PasswordChecker_CurrentUser_Call) Run(run func()) *PasswordChecker_CurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PasswordChecker_CurrentUser_Call) Return(s string) *PasswordChecker_CurrentUser_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *PasswordChecker_CurrentUser_Call) RunAndReturn(run func() string) *PasswordChecker_CurrentUser_Call {
	_c.Call.Return(run)
	return _c
}
