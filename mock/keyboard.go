// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/adamroach/webrd/pkg/hid/key"
	mock "github.com/stretchr/testify/mock"
)

// NewKeyboard creates a new instance of Keyboard. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyboard(t interface {
	mock.TestingT
	Cleanup(func())
}) *Keyboard {
	mock := &Keyboard{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Keyboard is an autogenerated mock type for the Keyboard type
type Keyboard struct {
	mock.Mock
}

type Keyboard_Expecter struct {
	mock *mock.Mock
}

func (_m *Keyboard) EXPECT() *Keyboard_Expecter {
	return &Keyboard_Expecter{mock: &_m.Mock}
}

// Key provides a mock function for the type Keyboard
func (_mock *Keyboard) Key(event key.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(key.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Keyboard_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Keyboard_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
//   - event
func (_e *Keyboard_Expecter) Key(event interface{}) *Keyboard_Key_Call {
	return &Keyboard_Key_Call{Call: _e.mock.On("Key", event)}
}

func (_c *Keyboard_Key_Call) Run(run func(event key.Event)) *Keyboard_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(key.Event))
	})
	return _c
}

func (_c *Keyboard_Key_Call) Return(err error) *Keyboard_Key_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Keyboard_Key_Call) RunAndReturn(run func(event key.Event) error) *Keyboard_Key_Call {
	_c.Call.Return(run)
	return _c
}
