// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/pion/webrtc/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewSender creates a new instance of Sender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

type Sender_Expecter struct {
	mock *mock.Mock
}

func (_m *Sender) EXPECT() *Sender_Expecter {
	return &Sender_Expecter{mock: &_m.Mock}
}

// AddTrack provides a mock function for the type Sender
func (_mock *Sender) AddTrack(pc *webrtc.PeerConnection) error {
	ret := _mock.Called(pc)

	if len(ret) == 0 {
		panic("no return value specified for AddTrack")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*webrtc.PeerConnection) error); ok {
		r0 = returnFunc(pc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Sender_AddTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTrack'
type Sender_AddTrack_Call struct {
	*mock.Call
}

// AddTrack is a helper method to define mock.On call
//   - pc
func (_e *Sender_Expecter) AddTrack(pc interface{}) *Sender_AddTrack_Call {
	return &Sender_AddTrack_Call{Call: _e.mock.On("AddTrack", pc)}
}

func (_c *Sender_AddTrack_Call) Run(run func(pc *webrtc.PeerConnection)) *Sender_AddTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*webrtc.PeerConnection))
	})
	return _c
}

func (_c *Sender_AddTrack_Call) Return(err error) *Sender_AddTrack_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Sender_AddTrack_Call) RunAndReturn(run func(pc *webrtc.PeerConnection) error) *Sender_AddTrack_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type Sender
func (_mock *Sender) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Sender_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Sender_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Sender_Expecter) Close() *Sender_Close_Call {
	return &Sender_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Sender_Close_Call) Run(run func()) *Sender_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sender_Close_Call) Return(err error) *Sender_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Sender_Close_Call) RunAndReturn(run func() error) *Sender_Close_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCodecs provides a mock function for the type Sender
func (_mock *Sender) RegisterCodecs(me *webrtc.MediaEngine) error {
	ret := _mock.Called(me)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCodecs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*webrtc.MediaEngine) error); ok {
		r0 = returnFunc(me)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Sender_RegisterCodecs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCodecs'
type Sender_RegisterCodecs_Call struct {
	*mock.Call
}

// RegisterCodecs is a helper method to define mock.On call
//   - me
func (_e *Sender_Expecter) RegisterCodecs(me interface{}) *Sender_RegisterCodecs_Call {
	return &Sender_RegisterCodecs_Call{Call: _e.mock.On("RegisterCodecs", me)}
}

func (_c *Sender_RegisterCodecs_Call) Run(run func(me *webrtc.MediaEngine)) *Sender_RegisterCodecs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*webrtc.MediaEngine))
	})
	return _c
}

func (_c *Sender_RegisterCodecs_Call) Return(err error) *Sender_RegisterCodecs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Sender_RegisterCodecs_Call) RunAndReturn(run func(me *webrtc.MediaEngine) error) *Sender_RegisterCodecs_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type Sender
func (_mock *Sender) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Sender_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Sender_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *Sender_Expecter) Start() *Sender_Start_Call {
	return &Sender_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *Sender_Start_Call) Run(run func()) *Sender_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sender_Start_Call) Return(err error) *Sender_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Sender_Start_Call) RunAndReturn(run func() error) *Sender_Start_Call {
	_c.Call.Return(run)
	return _c
}
