// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAudioCapturer creates a new instance of AudioCapturer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAudioCapturer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AudioCapturer {
	mock := &AudioCapturer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AudioCapturer is an autogenerated mock type for the AudioCapturer type
type AudioCapturer struct {
	mock.Mock
}

type AudioCapturer_Expecter struct {
	mock *mock.Mock
}

func (_m *AudioCapturer) EXPECT() *AudioCapturer_Expecter {
	return &AudioCapturer_Expecter{mock: &_m.Mock}
}

// FrameChannel provides a mock function for the type AudioCapturer
func (_mock *AudioCapturer) FrameChannel() <-chan []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FrameChannel")
	}

	var r0 <-chan []byte
	if returnFunc, ok := ret.Get(0).(func() <-chan []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []byte)
		}
	}
	return r0
}

// AudioCapturer_FrameChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FrameChannel'
type AudioCapturer_FrameChannel_Call struct {
	*mock.Call
}

// FrameChannel is a helper method to define mock.On call
func (_e *AudioCapturer_Expecter) FrameChannel() *AudioCapturer_FrameChannel_Call {
	return &AudioCapturer_FrameChannel_Call{Call: _e.mock.On("FrameChannel")}
}

func (_c *AudioCapturer_FrameChannel_Call) Run(run func()) *AudioCapturer_FrameChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AudioCapturer_FrameChannel_Call) Return(bytesCh <-chan []byte) *AudioCapturer_FrameChannel_Call {
	_c.Call.Return(bytesCh)
	return _c
}

func (_c *AudioCapturer_FrameChannel_Call) RunAndReturn(run func() <-chan []byte) *AudioCapturer_FrameChannel_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type AudioCapturer
func (_mock *AudioCapturer) Start() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AudioCapturer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type AudioCapturer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *AudioCapturer_Expecter) Start() *AudioCapturer_Start_Call {
	return &AudioCapturer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *AudioCapturer_Start_Call) Run(run func()) *AudioCapturer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AudioCapturer_Start_Call) Return(err error) *AudioCapturer_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AudioCapturer_Start_Call) RunAndReturn(run func() error) *AudioCapturer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type AudioCapturer
func (_mock *AudioCapturer) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AudioCapturer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type AudioCapturer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *AudioCapturer_Expecter) Stop() *AudioCapturer_Stop_Call {
	return &AudioCapturer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *AudioCapturer_Stop_Call) Run(run func()) *AudioCapturer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AudioCapturer_Stop_Call) Return(err error) *AudioCapturer_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AudioCapturer_Stop_Call) RunAndReturn(run func() error) *AudioCapturer_Stop_Call {
	_c.Call.Return(run)
	return _c
}
